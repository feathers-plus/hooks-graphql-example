const graphqlSchemas =

  [ 'type Comment {',
    '  id: ID',
    '  _id: ID',
    '  authorId: ID',
    '  postId: ID',
    '  body: String',
    '  archived: String',
    '  author: User!',
    '  likes: [Like!]',
    '}',
    ' ',
    'type Like {',
    '  id: ID',
    '  _id: ID',
    '  authorId: ID',
    '  commentId: ID',
    '  author: User!',
    '  comment: Comment!',
    '}',
    ' ',
    'type Post {',
    '  id: ID',
    '  _id: ID',
    '  authorId: ID',
    '  body: String',
    '  draft: Boolean',
    '  author: User!',
    '  comments: [Comment!]',
    '}',
    ' ',
    'type Relationship {',
    '  id: ID',
    '  _id: ID',
    '  followerId: ID',
    '  followeeId: ID',
    '  follower: User!',
    '  followee: User!',
    '}',
    ' ',
    'type User {',
    '  id: ID',
    '  _id: ID',
    '  email: String',
    '  firstName: String',
    '  lastName: String',
    '  fullName: String!',
    '  posts(query: JSON, params: JSON, key: JSON): [Post!]',
    '  comments: [Comment!]',
    '  followed_by: [Relationship!]',
    '  following: [Relationship!]',
    '  likes: [Like!]',
    '}',
    ' ',
    '',
    'type Query {',
    '  getComment(key: JSON, query: JSON, params: JSON): Comment',
    '  findComment(query: JSON, params: JSON): [Comment]!',
    '  getLike(key: JSON, query: JSON, params: JSON): Like',
    '  findLike(query: JSON, params: JSON): [Like]!',
    '  getPost(key: JSON, query: JSON, params: JSON): Post',
    '  findPost(query: JSON, params: JSON): [Post]!',
    '  getRelationship(key: JSON, query: JSON, params: JSON): Relationship',
    '  findRelationship(query: JSON, params: JSON): [Relationship]!',
    '  getUser(key: JSON, query: JSON, params: JSON): User',
    '  findUser(query: JSON, params: JSON): [User]!',
    '}' ]

const mapping =
  { feathers:
      { comments: { graphql: 'Comment', path: '/comments', adapter: 'nedb' },
        likes: { graphql: 'Like', path: '/likes', adapter: 'nedb' },
        posts: { graphql: 'Post', path: '/posts', adapter: 'nedb' },
        relationships:
          { graphql: 'Relationship',
            path: '/relationships',
            adapter: 'nedb' },
        users: { graphql: 'User', path: '/users', adapter: 'nedb' } },
    graphqlService:
      { Comment: { service: 'comments', path: '/comments', adapter: 'nedb' },
        Like: { service: 'likes', path: '/likes', adapter: 'nedb' },
        Post: { service: 'posts', path: '/posts', adapter: 'nedb' },
        Relationship:
          { service: 'relationships',
            path: '/relationships',
            adapter: 'nedb' },
        User: { service: 'users', path: '/users', adapter: 'nedb' } },
    graphqlSql: {} }

const feathersSpecs =
  { comments:
      { title: 'Comments',
        description: 'Comments database.',
        required: [],
        uniqueItemProperties: [],
        properties:
          { id: { type: 'ID' },
            _id: { type: 'ID' },
            authorId: { type: 'ID', faker: { fk: 'users' } },
            postId: { type: 'ID', faker: { fk: 'posts' } },
            body: { faker: 'lorem.sentence', type: 'string' },
            archived: { faker: 'random.boolean', type: 'string' } },
        _extensions:
          { graphql:
              { name: 'Comment',
                service: { _id: 1 },
                discard: [],
                add:
                  { author:
                      { type: 'User!',
                        args: '',
                        relation:
                          { ourTable: 'authorId',
                            otherTable: '_id',
                            ourTableIsArray: false,
                            ourTableSql: 'authorId',
                            otherTableName: 'User',
                            otherTableService: 'users',
                            otherTableIsArray: false,
                            otherTableSql: '_id' },
                        typeName: 'User',
                        isScalar: false,
                        isNullable: false,
                        isArray: false,
                        isNullableElem: null,
                        serviceName: 'users' },
                    likes:
                      { type: '[Like!]',
                        args: '',
                        relation:
                          { ourTable: '_id',
                            otherTable: 'commentId',
                            ourTableIsArray: false,
                            ourTableSql: '_id',
                            otherTableName: 'Like',
                            otherTableService: 'likes',
                            otherTableIsArray: false,
                            otherTableSql: 'commentId' },
                        typeName: 'Like',
                        isScalar: false,
                        isNullable: true,
                        isArray: true,
                        isNullableElem: false,
                        serviceName: 'likes' } },
                sql: { uniqueKey: 'id', sqlColumn: {} },
                serviceSortParams: ', { query: { $sort: {   _id: 1 } } }' },
            primaryKey: { idName: '_id', idType: 'string' },
            foreignKeys: [ 'id', '_id', 'authorId', 'postId' ],
            _ifGraphql: true } },
    likes:
      { title: 'Likes',
        description: 'Likes database.',
        required: [],
        uniqueItemProperties: [],
        properties:
          { id: { type: 'ID' },
            _id: { type: 'ID' },
            authorId: { type: 'ID', faker: { fk: 'users' } },
            commentId: { type: 'ID', faker: { fk: 'comments' } } },
        _extensions:
          { graphql:
              { name: 'Like',
                service: { _id: 1 },
                discard: [],
                add:
                  { author:
                      { type: 'User!',
                        args: '',
                        relation:
                          { ourTable: 'authorId',
                            otherTable: '_id',
                            ourTableIsArray: false,
                            ourTableSql: 'authorId',
                            otherTableName: 'User',
                            otherTableService: 'users',
                            otherTableIsArray: false,
                            otherTableSql: '_id' },
                        typeName: 'User',
                        isScalar: false,
                        isNullable: false,
                        isArray: false,
                        isNullableElem: null,
                        serviceName: 'users' },
                    comment:
                      { type: 'Comment!',
                        args: '',
                        relation:
                          { ourTable: 'commentId',
                            otherTable: '_id',
                            ourTableIsArray: false,
                            ourTableSql: 'commentId',
                            otherTableName: 'Comment',
                            otherTableService: 'comments',
                            otherTableIsArray: false,
                            otherTableSql: '_id' },
                        typeName: 'Comment',
                        isScalar: false,
                        isNullable: false,
                        isArray: false,
                        isNullableElem: null,
                        serviceName: 'comments' } },
                sql: { uniqueKey: 'id', sqlColumn: {} },
                serviceSortParams: ', { query: { $sort: {   _id: 1 } } }' },
            primaryKey: { idName: '_id', idType: 'string' },
            foreignKeys: [ 'id', '_id', 'authorId', 'commentId' ],
            _ifGraphql: true } },
    posts:
      { title: 'Posts',
        description: 'Posts database.',
        required: [],
        uniqueItemProperties: [],
        properties:
          { id: { type: 'ID' },
            _id: { type: 'ID' },
            authorId: { type: 'ID', faker: { fk: 'users' } },
            body: { faker: 'lorem.sentence', type: 'string' },
            draft: { type: 'boolean', faker: 'random.boolean' } },
        _extensions:
          { graphql:
              { name: 'Post',
                service: { _id: 1 },
                discard: [],
                add:
                  { author:
                      { type: 'User!',
                        args: '',
                        relation:
                          { ourTable: 'authorId',
                            otherTable: '_id',
                            ourTableIsArray: false,
                            ourTableSql: 'authorId',
                            otherTableName: 'User',
                            otherTableService: 'users',
                            otherTableIsArray: false,
                            otherTableSql: '_id' },
                        typeName: 'User',
                        isScalar: false,
                        isNullable: false,
                        isArray: false,
                        isNullableElem: null,
                        serviceName: 'users' },
                    comments:
                      { type: '[Comment!]',
                        args: '',
                        relation:
                          { ourTable: '_id',
                            otherTable: 'postId',
                            ourTableIsArray: false,
                            ourTableSql: '_id',
                            otherTableName: 'Comment',
                            otherTableService: 'comments',
                            otherTableIsArray: false,
                            otherTableSql: 'postId' },
                        typeName: 'Comment',
                        isScalar: false,
                        isNullable: true,
                        isArray: true,
                        isNullableElem: false,
                        serviceName: 'comments' } },
                sql: { uniqueKey: 'id', sqlColumn: {} },
                serviceSortParams: ', { query: { $sort: {   _id: 1 } } }' },
            primaryKey: { idName: '_id', idType: 'string' },
            foreignKeys: [ 'id', '_id', 'authorId' ],
            _ifGraphql: true } },
    relationships:
      { title: 'Relationships',
        description: 'Relationships database.',
        required: [],
        uniqueItemProperties: [],
        properties:
          { id: { type: 'ID' },
            _id: { type: 'ID' },
            followerId: { type: 'ID', faker: { fk: 'users' } },
            followeeId: { type: 'ID', faker: { fk: 'users' } } },
        _extensions:
          { graphql:
              { name: 'Relationship',
                service: { _id: 1 },
                discard: [],
                add:
                  { follower:
                      { type: 'User!',
                        args: '',
                        relation:
                          { ourTable: 'followerId',
                            otherTable: '_id',
                            ourTableIsArray: false,
                            ourTableSql: 'followerId',
                            otherTableName: 'User',
                            otherTableService: 'users',
                            otherTableIsArray: false,
                            otherTableSql: '_id' },
                        typeName: 'User',
                        isScalar: false,
                        isNullable: false,
                        isArray: false,
                        isNullableElem: null,
                        serviceName: 'users' },
                    followee:
                      { type: 'User!',
                        args: '',
                        relation:
                          { ourTable: 'followeeId',
                            otherTable: '_id',
                            ourTableIsArray: false,
                            ourTableSql: 'followeeId',
                            otherTableName: 'User',
                            otherTableService: 'users',
                            otherTableIsArray: false,
                            otherTableSql: '_id' },
                        typeName: 'User',
                        isScalar: false,
                        isNullable: false,
                        isArray: false,
                        isNullableElem: null,
                        serviceName: 'users' } },
                sql: { uniqueKey: 'id', sqlColumn: {} },
                serviceSortParams: ', { query: { $sort: {   _id: 1 } } }' },
            primaryKey: { idName: '_id', idType: 'string' },
            foreignKeys: [ 'id', '_id', 'followerId', 'followeeId' ],
            _ifGraphql: true } },
    users:
      { title: 'Users',
        description: 'Users database.',
        required: [],
        uniqueItemProperties: [],
        properties:
          { id: { type: 'ID' },
            _id: { type: 'ID' },
            email: { faker: 'internet.email', type: 'string' },
            firstName: { faker: 'name.firstName', type: 'string' },
            lastName: { faker: 'name.lastName', type: 'string' } },
        _extensions:
          { graphql:
              { name: 'User',
                service: { _id: 1 },
                discard: [],
                add:
                  { fullName:
                      { type: 'String!',
                        args: '',
                        typeName: 'String',
                        isScalar: true,
                        isNullable: false,
                        isArray: false,
                        isNullableElem: null,
                        serviceName: undefined,
                        relation:
                          { ourTable: '__USER_ID__',
                            ourTableIsArray: false,
                            ourTableSql: '__USER_ID__' } },
                    posts:
                      { type: '[Post!]',
                        relation:
                          { ourTable: '_id',
                            otherTable: 'authorId',
                            ourTableIsArray: false,
                            ourTableSql: '_id',
                            otherTableName: 'Post',
                            otherTableService: 'posts',
                            otherTableIsArray: false,
                            otherTableSql: 'authorId' },
                        args: '(query: JSON, params: JSON, key: JSON)',
                        typeName: 'Post',
                        isScalar: false,
                        isNullable: true,
                        isArray: true,
                        isNullableElem: false,
                        serviceName: 'posts' },
                    comments:
                      { type: '[Comment!]',
                        args: '',
                        relation:
                          { ourTable: '_id',
                            otherTable: 'authorId',
                            ourTableIsArray: false,
                            ourTableSql: '_id',
                            otherTableName: 'Comment',
                            otherTableService: 'comments',
                            otherTableIsArray: false,
                            otherTableSql: 'authorId' },
                        typeName: 'Comment',
                        isScalar: false,
                        isNullable: true,
                        isArray: true,
                        isNullableElem: false,
                        serviceName: 'comments' },
                    followed_by:
                      { type: '[Relationship!]',
                        args: '',
                        relation:
                          { ourTable: '_id',
                            otherTable: 'followeeId',
                            ourTableIsArray: false,
                            ourTableSql: '_id',
                            otherTableName: 'Relationship',
                            otherTableService: 'relationships',
                            otherTableIsArray: false,
                            otherTableSql: 'followeeId' },
                        typeName: 'Relationship',
                        isScalar: false,
                        isNullable: true,
                        isArray: true,
                        isNullableElem: false,
                        serviceName: 'relationships' },
                    following:
                      { type: '[Relationship!]',
                        args: '',
                        relation:
                          { ourTable: '_id',
                            otherTable: 'followerId',
                            ourTableIsArray: false,
                            ourTableSql: '_id',
                            otherTableName: 'Relationship',
                            otherTableService: 'relationships',
                            otherTableIsArray: false,
                            otherTableSql: 'followerId' },
                        typeName: 'Relationship',
                        isScalar: false,
                        isNullable: true,
                        isArray: true,
                        isNullableElem: false,
                        serviceName: 'relationships' },
                    likes:
                      { type: '[Like!]',
                        args: '',
                        relation:
                          { ourTable: '_id',
                            otherTable: 'authorId',
                            ourTableIsArray: false,
                            ourTableSql: '_id',
                            otherTableName: 'Like',
                            otherTableService: 'likes',
                            otherTableIsArray: false,
                            otherTableSql: 'authorId' },
                        typeName: 'Like',
                        isScalar: false,
                        isNullable: true,
                        isArray: true,
                        isNullableElem: false,
                        serviceName: 'likes' } },
                sql: { uniqueKey: 'id', sqlColumn: {} },
                serviceSortParams: ', { query: { $sort: {   _id: 1 } } }' },
            primaryKey: { idName: '_id', idType: 'string' },
            foreignKeys: [ 'id', '_id' ],
            _ifGraphql: true } } }
